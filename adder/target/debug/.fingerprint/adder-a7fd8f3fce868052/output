{"message":"`main` function not found in crate `adder`","code":{"code":"E0601","explanation":"\nNo `main` function was found in a binary crate. To fix this error, add a\n`main` function. For example:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can go look to the Rust Book to get\nstarted: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":1628,"line_start":1,"line_end":68,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"#[derive(Debug)]","highlight_start":1,"highlight_end":17},{"text":"struct Rectangle {","highlight_start":1,"highlight_end":19},{"text":"    width: u32,","highlight_start":1,"highlight_end":16},{"text":"    height: u32,","highlight_start":1,"highlight_end":17},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"impl Rectangle {","highlight_start":1,"highlight_end":17},{"text":"    fn area(&self) -> u32 {","highlight_start":1,"highlight_end":28},{"text":"        self.width * self.height","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn can_hold(&self, other: &Rectangle) -> bool {","highlight_start":1,"highlight_end":52},{"text":"        self.width > other.width && self.height > other.height","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn square(size: u32) -> Rectangle {","highlight_start":1,"highlight_end":40},{"text":"        Rectangle {","highlight_start":1,"highlight_end":20},{"text":"            width: size,","highlight_start":1,"highlight_end":25},{"text":"            height: size,","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"/*","highlight_start":1,"highlight_end":3},{"text":"fn main() {","highlight_start":1,"highlight_end":12},{"text":"    let width1: u32 = 30;","highlight_start":1,"highlight_end":26},{"text":"    let height1: u32 = 50;","highlight_start":1,"highlight_end":27},{"text":"    println!(\"\\nUsing two variables:\");","highlight_start":1,"highlight_end":40},{"text":"    println!(\"The area of the rectangle is {} units\", area_sides(width1, height1));","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let rect1 = (30, 50);","highlight_start":1,"highlight_end":26},{"text":"    println!(\"\\nUsing a tuple:\");","highlight_start":1,"highlight_end":34},{"text":"    println!(\"The area of the rectangle is {} units\", area_tuple(rect1));","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let rect = Rectangle {","highlight_start":1,"highlight_end":27},{"text":"        width: 30,","highlight_start":1,"highlight_end":19},{"text":"        height: 50,","highlight_start":1,"highlight_end":20},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    println!(\"\\nUsing a struct\");","highlight_start":1,"highlight_end":34},{"text":"    println!(\"The area of the rectangle is {} units\", area_struct(&rect));","highlight_start":1,"highlight_end":75},{"text":"    println!(\"The area of the rectangle is {} units\", rect.area());","highlight_start":1,"highlight_end":68},{"text":"    println!(\"Unformatted print: {:?}\", rect);","highlight_start":1,"highlight_end":47},{"text":"    println!(\"Formatted print: {:#?}\", rect);","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let small_rect = Rectangle {","highlight_start":1,"highlight_end":33},{"text":"        width: 20,","highlight_start":1,"highlight_end":19},{"text":"        height: 40,","highlight_start":1,"highlight_end":20},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    println!(\"Can rect hold small_rect? {}\", rect.can_hold(&small_rect));","highlight_start":1,"highlight_end":74},{"text":"    println!(\"Can small_rect hold rect? {}\", small_rect.can_hold(&rect));","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let sq = Rectangle::square(3);","highlight_start":1,"highlight_end":35},{"text":"    println!(\"Square is: {:#?}\", sq);","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"*/","highlight_start":1,"highlight_end":3},{"text":"","highlight_start":1,"highlight_end":1},{"text":"fn area_sides(width: u32, height: u32) -> u32 {","highlight_start":1,"highlight_end":48},{"text":"    width * height","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"fn area_tuple(dimensions: (u32, u32)) -> u32 {","highlight_start":1,"highlight_end":47},{"text":"    dimensions.0 * dimensions.1","highlight_start":1,"highlight_end":32},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"fn area_struct(rectangle: &Rectangle) -> u32 {","highlight_start":1,"highlight_end":47},{"text":"    rectangle.width * rectangle.height","highlight_start":1,"highlight_end":39},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"consider adding a `main` function to `src/main.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m: `main` function not found in crate `adder`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct Rectangle {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    width: u32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    height: u32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    rectangle.width * rectangle.height\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `src/main.rs`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0601`.\u001b[0m\n"}
